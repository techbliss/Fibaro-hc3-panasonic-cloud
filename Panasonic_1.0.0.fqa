{"name":"Panasonic ","type":"com.fibaro.binarySwitch","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_156"},"sections":{"items":[{"components":[{"name":"labeltemp","style":{"weight":"1.2"},"text":"Temperature","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnOn","style":{"weight":"0.50"},"text":"ON","type":"button","visible":true},{"name":"btnOff","style":{"weight":"0.50"},"text":"Off","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label","style":{"weight":"1.2"},"text":"Set Temperature","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"max":"100","min":"0","name":"slider","style":{"weight":"1.2"},"text":"","type":"slider","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelmode","style":{"weight":"1.2"},"text":"Mode","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnd","style":{"weight":"0.33"},"text":"Dry","type":"button","visible":true},{"name":"btnC","style":{"weight":"0.33"},"text":"Cool","type":"button","visible":true},{"name":"btnH","style":{"weight":"0.33"},"text":"Heat","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnA","style":{"weight":"0.50"},"text":"Auto","type":"button","visible":true},{"name":"btnF","style":{"weight":"0.50"},"text":"Fan","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelfan","style":{"weight":"1.2"},"text":"Fan speed","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnf1","style":{"weight":"0.20"},"text":"I","type":"button","visible":true},{"name":"btnf2","style":{"weight":"0.20"},"text":"II","type":"button","visible":true},{"name":"btnf3","style":{"weight":"0.20"},"text":"III","type":"button","visible":true},{"name":"btnf4","style":{"weight":"0.20"},"text":"IIII","type":"button","visible":true},{"name":"btnf5","style":{"weight":"0.20"},"text":"IIIII","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labeleco","style":{"weight":"1.2"},"text":"Eco mode","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnqui","style":{"weight":"0.33"},"text":"Quiet","type":"button","visible":true},{"name":"btnpowf","style":{"weight":"0.33"},"text":"Powerfull","type":"button","visible":true},{"name":"btnau","style":{"weight":"0.33"},"text":"Auto","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelfanu","style":{"weight":"1.2"},"text":"Swing mode","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"btnaufoff","style":{"weight":"0.25"},"text":"off","type":"button","visible":true},{"name":"btnswinau","style":{"weight":"0.25"},"text":"auto","type":"button","visible":true},{"name":"button4_3","style":{"weight":"0.25"},"text":"⇦  ⇨","type":"button","visible":true},{"name":"btnswupdo","style":{"weight":"0.25"},"text":"⇧ ⇩","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelx","style":{"weight":"1.2"},"text":"Nanoe X ","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"components":[{"name":"buttonxon","style":{"weight":"0.50"},"text":"Nanoe X on","type":"button","visible":true},{"name":"buttonxof","style":{"weight":"0.50"},"text":"Nanoe  X off","type":"button","visible":true}],"style":{"weight":"1.2"},"type":"horizontal"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"bntindebugU","style":{"weight":"1.2"},"text":"Debug unit data","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"btnnow","style":{"weight":"1.2"},"text":"Debug get data now","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"btnhis","style":{"weight":"1.2"},"text":"Debug get history","type":"button","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_156"}}},"uiCallbacks":[{"callback":"Onpressed","eventType":"onReleased","name":"btnOn"},{"callback":"offpressed","eventType":"onReleased","name":"btnOff"},{"callback":"onSliderChanged","eventType":"onChanged","name":"slider"},{"callback":"drypressed","eventType":"onReleased","name":"btnd"},{"callback":"coolpressed","eventType":"onReleased","name":"btnC"},{"callback":"heatpressed","eventType":"onReleased","name":"btnH"},{"callback":"aupressed","eventType":"onReleased","name":"btnA"},{"callback":"fanpressed","eventType":"onReleased","name":"btnF"},{"callback":"press1","eventType":"onReleased","name":"btnf1"},{"callback":"presstwo","eventType":"onReleased","name":"btnf2"},{"callback":"presstree","eventType":"onReleased","name":"btnf3"},{"callback":"pressfour","eventType":"onReleased","name":"btnf4"},{"callback":"pressfive","eventType":"onReleased","name":"btnf5"},{"callback":"pressqui","eventType":"onReleased","name":"btnqui"},{"callback":"Presspowf","eventType":"onReleased","name":"btnpowf"},{"callback":"pressauf","eventType":"onReleased","name":"btnau"},{"callback":"onfanspeed","eventType":"onReleased","name":"btnaufoff"},{"callback":"pressedswingau","eventType":"onReleased","name":"btnswinau"},{"callback":"pressedfantauleftright","eventType":"onReleased","name":"button4_3"},{"callback":"pressedswingupdao","eventType":"onReleased","name":"btnswupdo"},{"callback":"pressedonnano","eventType":"onReleased","name":"buttonxon"},{"callback":"pressesoffnano","eventType":"onReleased","name":"buttonxof"},{"callback":"turn2","eventType":"onReleased","name":"bntindebugU"},{"callback":"getNow","eventType":"onReleased","name":"btnnow"},{"callback":"getHis","eventType":"onReleased","name":"btnhis"}],"quickAppVariables":[{"name":"Username","value":"jane@do.com"},{"name":"password","value":"mysecret"},{"name":"language","value":"2"},{"name":"Heat start temp","value":"29"},{"name":"Cool start temp","value":"15"},{"name":"Auto start temp","value":"20"},{"name":"dry start temp","value":"25"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- by @zadow28\n-- feel free to use and adjust code for personal use.\n-- github https://github.com/techbliss/HC3_Quickapp_Panasonic_cloud\n-- feel free to contact me at https://forum.fibaro.com/\n\n---------------------------------------------------------------------------------------\n     -- Panasonic comfort cloud for fibaro home center 3 \n     -- version 1.0.0\n\n---------------------------------------------------------------------------------------  \n\n---------------------------------------------------------------------------------------\n     -- Panasonic change app version often so we check for new version\n---------------------------------------------------------------------------------------  \n\n\n\nfunction QuickApp:getpresentversion()\n\n    local httpver = net.HTTPClient()--{timeout = 5000})  --  5 seconds\n    local urlver = \"https://itunes.apple.com/lookup?id=1348640525\"\n\n    local inputheaders = {\n    ['accept'] = 'application/json', \n    ['content-type'] = 'application/json', \n    }\n    httpver:request(urlver, {\n            options = { \n            method = \"GET\",\n            headers = inputheaders,\n            }, \n\n            success = function(response)\n                self:debug(response.status)\n                self:debug(response.data)\n                verbob = json.decode(response.data)\n                APPversion = verbob.results[1].version\n                if verbob.results[1].version == nil then\n                    APPversion = '1.12.0'\n                end\n                if response.status == 200  then\n                    print(\"Appversion retrieved\")\n                end\n\n            end,  --  success\n            \n            error = function(msg)\n                self:debug('Error:'..msg)\n\n            end  --  error\n        }) \n\nend\n\n \n\nfunction QuickApp:onInit()\n    QuickApp:getpresentversion()\n    setInterval(function() QuickApp:getpresentversion() end, 3600*1000) -- check for new appversion every hour\n    ------------------------------------------------------------------------------------------\n                --slider settings\n    --------------------------------------------------------------------------------------------\n    self:debug(\"onInit\")\n    self:updateView(\"slider\",\"min\",\"16\")\n    self:updateView(\"slider\",\"max\", \"30\")\n    self:updateView(\"slider\", \"value\", \"21\") \n    self:updateView(\"slider\", \"step\", \"0.5\")\n\n\n    lang = self:getVariable(\"language\")\n    pass = self:getVariable(\"password\")\n    user = self:getVariable(\"Username\")\n    --self:turnOn()\n    fibaro.setTimeout(1500, function() QuickApp:turn1()() end) --token first\n    fibaro.setTimeout(3000, function() QuickApp:turn2() end) --when we got token we can run the rest.\n    fibaro.setTimeout(604800000, function() QuickApp:onInit() end) --token restart every month\n    ------------------------------------------------------------------------------------------\n                --hide debug buttons\n    --------------------------------------------------------------------------------------------\n    self:updateView(\"bntindebugU\", \"visible\", false)\n    self:updateView(\"btnnow\", \"visible\", false) \n    self:updateView(\"btnhis\", \"visible\", false)\n\nend\n\n---------------------------------------------------------------------------------------\n                            -- login\n---------------------------------------------------------------------------------------  \n\nfunction QuickApp:turn1()\n    local http = net.HTTPClient()--{timeout = 5000})  --  5 seconds\n    local data = nil\n    local url = \"https://accsmart.panasonic.com/auth/login/\"\n    print(url)\n\n\n    local params = {\n        ['language'] = lang,\n        ['password'] = pass,\n        ['loginId'] = user\n\n        }\n        --print(type(params))\n        --sert = '\\certificatechain.pem' \n        print(sert)\n    \n    local inputheaders = {\n        ['X-APP-TYPE'] = '1', \n        ['X-APP-VERSION'] = APPversion,\n        ['user-agent'] = 'G-RAC',\n        ['accept'] = 'application/json', \n        ['content-type'] = 'application/json', \n        --['SERVER_PROTOCOL'] = 'HTTP/1.1'\n        }\n\n        http:request(url, {\n        options = { \n        method = \"POST\",\n        data = json.encode(params),\n        headers = inputheaders,\n        }, \n    --params,\n        success = function(response)\n            self:debug(response.status)\n            self:debug(response.data)\n            bob = json.decode(response.data)\n            accessToken = bob.uToken\n            print(accessToken)\n            if response.status == 200  then\n                print(\"Token retrieved\")\n            end\n\n        end,  --  success\n        \n        error = function(msg)\n            self:debug('Error:'..msg)\n        end  --  error\n    })\n               \nend\n---------------------------------------------------------------------------------------\n                            -- get devices and status\n---------------------------------------------------------------------------------------  \nfunction QuickApp:turn2()    \n    local http = net.HTTPClient()--{timeout = 5000})  --  5 seconds\n    local data = nil\n    local url2 = \"https://accsmart.panasonic.com/device/group\"\n    \n    local inputheaders2 = {\n        ['X-APP-TYPE'] = '1', \n        ['X-APP-VERSION'] = APPversion,\n        ['user-agent'] = 'G-RAC',\n        ['accept'] = 'application/json', \n        ['content-type'] = 'application/json', \n        [\"X-User-Authorization\"] = accessToken,\n        }\n\n    http:request(url2, {\n        options = { \n        method = \"GET\",\n        headers = inputheaders2,\n        }, \n    --params,\n        success = function(response)\n        self:debug(response.status)\n        self:debug(response.data)\n        if response.status == 200  then\n            print(\"get devices ok\")\n        end\n---------------------------------------------------------------------------------------\n                            -- parameters\n---------------------------------------------------------------------------------------        \n        bob2 = json.decode(response.data)\n        operate = bob2.groupList[1].deviceList[1].parameters.operate\n        operationM = bob2.groupList[1].deviceList[1].parameters.operationMode\n        tempe = bob2.groupList[1].deviceList[1].parameters.temperatureSet\n        fanS = bob2.groupList[1].deviceList[1].parameters.fanSpeed\n        fanAutoM = bob2.groupList[1].deviceList[1].parameters.fanAutoMode\n        SwingLR = bob2.groupList[1].deviceList[1].parameters.airSwingLR\n        SwingUD = bob2.groupList[1].deviceList[1].parameters.airSwingUD\n        ecoM = bob2.groupList[1].deviceList[1].parameters.ecoMode\n        ecoN = bob2.groupList[1].deviceList[1].parameters.ecoNavi\n        nano = bob2.groupList[1].deviceList[1].parameters.nanoe\n        iAu = bob2.groupList[1].deviceList[1].parameters.iAuto\n        actualN = bob2.groupList[1].deviceList[1].parameters.actualNanoe\n        airD = bob2.groupList[1].deviceList[1].parameters.airDirection\n        ecoF = bob2.groupList[1].deviceList[1].parameters.ecoFunctionData\n---------------------------------------------------------------------------------------\n                            -- Devicelist info\n---------------------------------------------------------------------------------------  \n\n\n        guid = bob2.groupList[1].deviceList[1].deviceGuid\n        modulenu = bob2.groupList[1].deviceList[1].deviceModuleNumber     \n        nanostat = bob2.groupList[1].deviceList[1].nanoe\n        self:debug(\"guid: \", json.encode(guid))\n        self:debug(\"name: \", json.encode(modulenu))\n        self:debug(\"labeltemp: \", json.encode(tempe))\n        self:debug(\"Nano X active: \", json.encode(nano))\n        end,  --  success\n        \n        error = function(response)\n            self:debug(response.status)\n            if response.status == 401 then \n                print(\"something went wrong\")\n            end    \n        \n        --print(data) -- no data\n        end \n    })\n    \n    \nend\n\nfunction QuickApp:sendcommand()\n    local hhtpcommand = net.HTTPClient()\n    urlcom = \"https://accsmart.panasonic.com/deviceStatus/control\"\n    local params3 = {\n        ['deviceGuid'] = guid,\n        ['parameters'] = { \n            ['operate'] = operate,\n            ['operationMode'] = operationM,\n            ['temperatureSet'] = tempe,\n            ['fanSpeed'] = fanS,\n            ['fanAutoMode'] = fanAutoM,\n            ['airSwingLR'] = SwingLR,\n            ['airSwingUD'] = SwingUD,\n            ['ecoMode'] = ecoM,\n            ['ecoNavi'] = ecoN,\n            ['nanoe'] = nano,\n            ['iAuto'] = iAu,\n            ['actualNanoe'] = actualN,\n            ['airDirection'] = airD,\n            ['ecoFunctionData'] = ecoF\n\n            }       \n    }\n    local inputheaders3 = {\n        ['X-APP-TYPE'] = '1', \n        ['X-APP-VERSION'] = APPversion,\n        ['user-agent'] = 'G-RAC',\n        ['accept'] = 'application/json', \n        ['content-type'] = 'application/json', \n        [\"X-User-Authorization\"] = accessToken,\n    }\n\n\n    hhtpcommand:request(urlcom, {\n        options = { \n        method = \"POST\",\n        data = json.encode(params3),\n        headers = inputheaders3\n        \n        }, \n    --params,\n        success = function(response)\n        self:debug(response.status)\n        self:debug(response.data)\n        if response.status == 200  then\n            print(\"everything okay\")\n        end\n    end,  --  success\n        \n        error = function(msg)\n            self:debug('Error:'..msg)\n        end  --  error\n    })\nend\n\n---------------------------------------------------------------------------------\n                        -- get status now temperute inside etc\n--------------------------------------------------------------------------------\n\nfunction QuickApp:getNow()\n    local hhtpgetda = net.HTTPClient()\n    urlgetda = \"https://accsmart.panasonic.com/deviceStatus/now/\"..guid\n\n     local inputheadersda = {\n        ['X-APP-TYPE'] = '1', \n        ['X-APP-VERSION'] = APPversion,\n        ['user-agent'] = 'G-RAC',\n        ['accept'] = 'application/json', \n        ['content-type'] = 'application/json', \n        [\"X-User-Authorization\"] = accessToken,\n    }\n\n    hhtpgetda:request(urlgetda, {\n        options = { \n        method = \"GET\",\n        headers = inputheadersda\n        \n        }, \n    --params,\n        success = function(response)\n        self:debug(response.status)\n        self:debug(response.data)\n        bob3 = json.decode(response.data)\n        tempe = bob3.parameters.temperatureSet\n       -- print(bob3.parameters.insideTemperature)\n       -- print(parameters.outTemperature)\n        fibaro.setGlobalVariable('inside heatpump temperature', tostring(bob3.parameters.insideTemperature))\n        fibaro.setGlobalVariable('Outside heatpump', tostring(bob3.parameters.outTemperature))\n        self:debug(\"labeltemp now: \", json.encode(tempe))      \n        if response.status == 200  then\n            print(\"GET NOOOOOOOOOOOOOOOOOO\")\n        end\n\n    end,  --  success\n        \n        error = function(msg)\n            self:debug('Error:'..msg)\n        end  --  error\n    })\nend\n\n---------------------------------------------------------------------------------\n                        -- for future apps History data cost energi etc\n--------------------------------------------------------------------------------\nfunction QuickApp:getHis()\n    local hhtpgethis = net.HTTPClient()\n    urlgethis = \"https://accsmart.panasonic.com/deviceHistoryData/\"\n\n\n    local paramshis = {\n        ['dataMode'] = '0',\n        ['date'] = '20210101',\n        ['deviceGuid'] = guid,\n        ['osTimezone'] = '+01:00'\n\n        }\n     local inputheadershis = {\n        ['X-APP-TYPE'] = '1', \n        ['X-APP-VERSION'] = APPversion,\n        ['user-agent'] = 'G-RAC',\n        ['accept'] = 'application/json', \n        ['content-type'] = 'application/json', \n        [\"X-User-Authorization\"] = accessToken,\n    }\n\n    hhtpgethis:request(urlgethis, {\n        options = { \n        data = json.encode(paramshis),\n        method = \"POST\",\n        headers = inputheadershis\n        \n        }, \n    --params,\n        success = function(response)\n        self:debug(response.status)\n        self:debug(response.data)\n        if response.status == 200  then\n            print(\"GET HISTORY\")\n        end\n    end,  --  success\n        \n        error = function(msg)\n            self:debug('Error:'..msg)\n        --print(data) -- no data\n        end  --  error\n    })\nend\nfunction QuickApp:gettemp()\n    QuickApp:getNow()\n    fibaro.setTimeout(1500, function() QuickApp:updatelabel() end)\nend\n\nfunction QuickApp:updatelabel()\n    self:updateView(\"labeltemp\", \"text\", json.encode(bob3.parameters.temperatureSet))\nend\n---------------------------------------------------------------------------------\n                        -- On / OFF\n--------------------------------------------------------------------------------\n\n\n\nfunction QuickApp:offpressed()\n    operate = tostring('0')\n    print (operate)\n    QuickApp:sendcommand()\n    operate = operate\n    self:updateView(\"labeltemp\", \"text\", \"OFF\") \nend\n\nfunction QuickApp:Onpressed()\n    operate = tostring('1')\n    QuickApp:sendcommand()\n    operate = operate\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe)) \nend\n---------------------------------------------------------------------------------\n                        -- FanSpeed\n--------------------------------------------------------------------------------\nfunction QuickApp:press1()\n    fanS = tostring('1')\n    ecoM = tostring('0')\n    QuickApp:sendcommand()\n    fanS = fanS\n    ecoM = ecoM\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n    self:updateView(\"labeleco\", \"text\", \"Eco mode off\")\nend \n\nfunction QuickApp:presstwo()\n    fanS = tostring('2')\n    ecoM = tostring('0')\n\n    QuickApp:sendcommand()\n    fanS = fanS\n    fanAutoM = fanAutoM\n    ecoM = ecoM\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n    self:updateView(\"labeleco\", \"text\", \"Eco mode off\")\nend\n\nfunction QuickApp:presstree()\n    fanS = tostring('3')\n    ecoM = tostring('0')\n\n    QuickApp:sendcommand()\n    fanS = fanS\n    fanAutoM = fanAutoM\n    ecoM = ecoM\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n    self:updateView(\"labeleco\", \"text\", \"Eco mode off\")\nend\n\nfunction QuickApp:pressfour()\n    fanS = tostring('4')\n    ecoM = tostring('0')\n\n    QuickApp:sendcommand()\n    fanS = fanS\n    fanAutoM = fanAutoM\n    ecoM = ecoM\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS)) \n    self:updateView(\"labeleco\", \"text\", \"Eco mode off\")\nend\n\nfunction QuickApp:pressfive()\n    fanS = tostring('5')\n    ecoM = tostring('0')\n\n    QuickApp:sendcommand()\n    fanS = fanS\n    fanAutoM = fanAutoM\n    ecoM = ecoM\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n    self:updateView(\"labeleco\", \"text\", \"Eco mode off\")\nend\n---------------------------------------------------------------------------------\n                        -- AUTOFAN MODES\n--------------------------------------------------------------------------------\n\nfunction QuickApp:onfanspeed()\n    fanAutoM = tostring('1')\n    QuickApp:sendcommand() \n    fanAutoM = fanAutoM\n    self:updateView(\"labelfanu\", \"text\", \"Swing mode off \"..tostring(fanAutoM)) \n\nend\n\nfunction QuickApp:pressedswingau()\n    fanAutoM = tostring('0')\n    QuickApp:sendcommand() \n    fanAutoM = fanAutoM\n    self:updateView(\"labelfanu\", \"text\", \"Swing mode  auto \"..tostring(fanAutoM)) \nend \n\nfunction QuickApp:pressedfantauleftright()\n    fanAutoM = tostring('3')\n    QuickApp:sendcommand() \n    fanAutoM = fanAutoM\n    self:updateView(\"labelfanu\", \"text\", \"Swing mode left - right \"..tostring(fanAutoM)) \nend\n\nfunction QuickApp:pressedswingupdao()\n    fanAutoM = tostring('2')\n    QuickApp:sendcommand() \n    fanAutoM = fanAutoM\n    self:updateView(\"labelfanu\", \"text\", \"Swing mode up - down \"..tostring(fanAutoM)) \nend\n\n\n---------------------------------------------------------------------------------\n                        -- eco modes\n--------------------------------------------------------------------------------\n\nfunction QuickApp:pressqui()\n    ecoM = tostring('2')\n    QuickApp:sendcommand()\n    if ecoM == '0' then\n        ecoM = 'Auto'   \n    elseif  ecoM == '1' then\n        ecoM = 'powefull'  \n    elseif  ecoM == '2' then\n        ecoM = 'quiet'\n    end  \n    self:updateView(\"labeleco\", \"text\", \"Eco mode \"..ecoM)\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n\n    ecoM = ecoM\nend\n\nfunction QuickApp:Presspowf()\n     ecoM = tostring('1')\n     QuickApp:sendcommand()\n    if ecoM == '0' then\n        ecoM = 'Auto'   \n    elseif  ecoM == '1' then\n        ecoM = 'powefull'  \n    elseif  ecoM == '2' then\n        ecoM = 'quiet'\n    end  \n    self:updateView(\"labeleco\", \"text\", \"Eco mode \"..ecoM)\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n\n    ecoM = ecoM\nend\n\nfunction QuickApp:pressauf()\n    ecoM = tostring('0')\n     QuickApp:sendcommand()\n    if ecoM == '0' then\n        ecoM = 'Auto'   \n    elseif  ecoM == '1' then\n        ecoM = 'powefull'  \n    elseif  ecoM == '2' then\n        ecoM = 'quiet'\n    end  \n    self:updateView(\"labeleco\", \"text\", \"Eco mode \"..ecoM)\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS))\n\n    ecoM = ecoM\nend\n\n\n\n\n\n\n\n---------------------------------------------------------------------------------\n                        -- Mode modes\n--------------------------------------------------------------------------------\nfunction QuickApp:heatpressed()\n    operationM = tostring('3')\n    tempe = self:getVariable(\"Heat start temp\")\n    QuickApp:sendcommand()\n    operationM = operationM\n    tempe = tempe\n    self:updateView(\"labelmode\", \"text\", \"Mode \"..tostring(operationM)) \n    self:updateView(\"labeltemp\", \"text\", tostring(tempe))\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS)) \nend\n\nfunction QuickApp:coolpressed()\n    operationM = tostring('2')\n    tempe = self:getVariable(\"Cool start temp\")\n    QuickApp:sendcommand() \n    operationM = operationM\n    tempe = tempe\n    self:updateView(\"labelmode\", \"text\", \"Mode \"..tostring(operationM))\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe)) \n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS)) \nend\n\nfunction QuickApp:drypressed()\n    operationM = tostring('3')\n    tempe = self:getVariable(\"dry start temp\")\n    QuickApp:sendcommand() \n    operationM = operationM\n    tempe = tempe\n    self:updateView(\"labelmode\", \"text\", \"Mode \"..tostring(operationM))\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe))\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS)) \nend\nfunction QuickApp:fanpressed()\n    operationM = tostring('4')\n    QuickApp:sendcommand()\n    operationM = operationM\n    self:updateView(\"labelmode\", \"text\", \"Mode \"..tostring(operationM))\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe))\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS)) \nend\nfunction QuickApp:aupressed()\n    operationM = tostring('0')\n    tempe = self:getVariable(\"Auto start temp\")\n    QuickApp:sendcommand()\n    operationM = operationM\n    tempe = tempe\n    self:updateView(\"labelmode\", \"text\", \"Mode \"..tostring(operationM))\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe))\n    self:updateView(\"labelfan\", \"text\", \"Fan speed \"..tostring(fanS)) \nend\n\n---------------------------------------------------------------------------------\n                        -- Nanoe X \n--------------------------------------------------------------------------------\nfunction QuickApp:pressedonnano()\n    nano = tostring('2')\n    actualN = tostring('2')\n    QuickApp:sendcommand()\n    self:updateView(\"labelx\", \"text\", \"Nanoe X  \"..tostring(nano))\n    nano = nano\n    actualN = actualN\nend\n\nfunction QuickApp:pressesoffnano()\n    nano = tostring('1')\n    actualN = tostring('1')\n    QuickApp:sendcommand()\n    self:updateView(\"labelx\", \"text\", \"Nanoe X  \"..tostring(operationM))\n    nano = nano\n    actualN = actualN\nend\n\n\n\n---------------------------------------------------------------------------------\n                        -- slider\n--------------------------------------------------------------------------------\n\nfunction QuickApp:SetVol(value)\n   -- if tempe < 13 and tempe  < 30  then tempe = \"-10\" ..tempe end\n    QuickApp:sendcommand()\n    tempe = tempe\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe))\nend\n\nfunction QuickApp:onSliderChanged(event)\n   tempe = event.values[1]\n\n   self:SetVol(value)\nend\n\n\nfunction QuickApp:turnOn()\n    operate = tostring('1')\n    QuickApp:sendcommand()\n    operate = operate\n    self:updateView(\"labeltemp\", \"text\", tostring(tempe)) \n    self:updateProperty(\"value\", true)   \nend\n\nfunction QuickApp:turnOff()\n    operate = tostring('0')\n    print (operate)\n    QuickApp:sendcommand()\n    operate = operate\n    self:updateView(\"labeltemp\", \"text\", \"OFF\")  \n    self:updateProperty(\"value\", false)    \nend"}]}